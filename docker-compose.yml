version: "3.9"
services:

  gateway-service:
    container_name: gateway-service
    env_file:
      - .env
    build:
      dockerfile: gateway/Dockerfile
    profiles: [ "backend" ]
    ports:
      - "5001:5001"
      - "3001:3001"
      - "8001:8001"
    networks:
      - services
    depends_on:
      - scylla-node1
      - kafka

  message-service:
    container_name: message-service
    env_file:
      - .env
    build:
      dockerfile: message/Dockerfile
    profiles: [ "backend" ]
    networks:
      - services
    depends_on:
      - scylla-node1
      - kafka

  scylla-node1:
    container_name: scylla-node1
    image: scylladb/scylla:6.0
    restart: no
    ports:
      - "9042:9042"
#    command: --seeds=scylla-node1,scylla-node2 --smp 1 --memory 750M --overprovisioned 1 --api-address 0.0.0.0
    networks:
      - services

  kafka:
    container_name: kafka
    restart: no
    ports:
      - "9092:9092"
      - "9093:9093"
    image: 'bitnami/kafka:latest'
    networks:
      - services
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

#  postgres:
#    container_name: postgres_container
#    image: postgres:16-alpine
#    environment:
#      POSTGRES_USER: ${POSTGRES_USER:-postgres}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
#      PGDATA: /data/postgres
#    volumes:
#      - postgres:/data/postgres
#    ports:
#      - "5432:5432"
#    networks:
#      - services
#    restart: unless-stopped


#  redis:
#    image: redis:latest
#    container_name: redis_container
#    environment:
#      - REDIS_PASSWORD=${REDIS_PASSWORD}
#      - REDIS_USER=${REDIS_USER}
#      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
#    ports:
#      - "6380:6379"
#    volumes:
#      - ./redisdata:/data
#    deploy:
#      resources:
#        limits:
#          cpus: '0.50'
#          memory: 512M
#        reservations:
#          cpus: '0.25'
#          memory: 256M
#    command: >
#      sh -c '
#        mkdir -p /usr/local/etc/redis &&
#        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
#        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
#        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
#        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
#        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
#        echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
#        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
#      '
#    healthcheck:
#      test: [ "CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#    restart: unless-stopped
#    tty: true
#    stdin_open: true


#  postgres:
#    container_name: postgres_container
#    image: postgres
#    environment:
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      PGDATA: /data/postgres
#    volumes:
#      - postgres:/data/postgres
#    ports:
#      - "5432:5432"
#    networks:
#      - services
#    restart: unless-stopped

networks:
  services:
    name: services

volumes:
  postgres: